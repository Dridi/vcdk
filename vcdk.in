#!/bin/sh
#
# Copyright (C) 2017  Dridi Boukelmoune
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e
set -u

DEFAULT_BUILD=autotools
DEFAULT_PLUGINS='@vcdkdir@'
NAME_REGEX='^[[:alnum:]_-]*$'

OPTIONS_USAGE="\
Usage: $0 [--name <name>] [--vmod <vmod> [--vsc <vsc>]] [--vut <vut>]
       $0 --help

At least one VMOD or one VUT must be specified, a VSC can only be used
in a VMOD. Options can only appear once in the command line, and options
that take an argument support both \`--opt value\` and \`--opt=value\`
notations.

Options:
"

OPTIONS_SPEC="\
--help			display this message and exit
--build=<plugin>	the build plugin (default: $DEFAULT_BUILD)
--name=<name>		the project name (pattern: $NAME_REGEX)
--output=<dir>		default: the project name
--plugins=<dir>		default: $DEFAULT_PLUGINS
--verbose		display status information of the execution
--vmod=<vmod>		a comma-separated list of vmods to build
--vsc=<vsc>		a comma-separated list of counters to build
--vut=<vut>		a comma-separated list of utilities to build
"

help=false
build=
name=
output=
plugins=
verbose=false
vmod=
vsc=
vut=

options_iter() {
	func=$1
	shift

	status=0

	OLD_IFS=$IFS
	IFS='|'
	spec=$(printf '%s' "$OPTIONS_SPEC" | tr '\n' '|')

	for line in $spec
	do
		opt=${line%%	*}
		dsc=${line##*	}
		"$func" "$opt" "$dsc" "$@" || status=$?
		test "$status" -eq 0 || break
	done
	IFS=$OLD_IFS

	return $status
}

options_parse() {
	opt_name=
	opt_arg=
	opt_shift=
	test $# -ge 1 || return 1

	opt_name=$1
	opt_shift=1

	opt_parse() {
		test "${1%=*}" = "${3%%=*}" || return 0

		if [ "${1%=*}" = "$1" ]
		then
			test "$1" = "$3" || usage_error "illegal option: $3"
			return 1
		fi

		if [ "$3" = "${3%%=*}" ]
		then
			opt_shift=2
		else
			opt_arg=${3#*=}
			test -n "$opt_arg" || usage_error "empty argument: $3"
		fi

		return 1
	}

	if options_iter opt_parse "$opt_name"
	then
		# didn't break out of the loop, no match
		usage_error "illegal option: $opt_name"
	fi

	if [ $opt_shift -eq 2 ]
	then
		test $# -ge 2 || usage_error "missing argument: $opt_name"
		opt_arg=$2
		test -n "$opt_arg" || usage_error "empty argument: $opt_name"
	fi

	opt_name=${opt_name#--}
	opt_name=${opt_name%%=*}
}

usage() {
	print_option_usage() {
		printf '    %-20s %s\n' "$1" "$2"
	}

	printf '%s' "$OPTIONS_USAGE"
	options_iter print_option_usage
}

usage_error() {
	printf 'vcdk: %s\n\n' "$*" >&2
	usage >&2
	exit 1
}

while options_parse "$@"
do
	opt_value=$(eval echo "\$$opt_name")
	test -n "$opt_value" && (
		test -n "$opt_arg" ||
		test "$opt_value" != false
	) && usage_error "option already set: --$opt_name"

	eval "$opt_name='${opt_arg:-true}'"
	shift $opt_shift
done

if $help
then
	usage
	exit
fi

if [ -z "$name" ]
then
	usage_error 'missing project name'
fi

if ! echo "$name" | grep -Eq "$NAME_REGEX"
then
	usage_error "invalid project name: $name"
fi

if [ -z "$vmod" ] && [ -z "$vut" ]
then
	usage_error 'no VMOD and no VUT to build'
fi

if [ -z "$vmod" ] && [ -n "$vsc" ]
then
	usage_error 'a VSC can only be used by a VMOD'
fi

output=${output:-$name}
rmdir "$output" 2>/dev/null || :
mkdir "$output"
cd "$output"

build=${build:-$DEFAULT_BUILD}
plugins=${plugins:-$DEFAULT_PLUGINS}

export VCDK_NAME=$name
export VCDK_NAME=$name
export VCDK_VMOD=$vmod
export VCDK_VUT=$vut
export VCDK_VSC=$vsc
export VCDK_VERBOSE=$verbose

exec "$plugins/$build"
